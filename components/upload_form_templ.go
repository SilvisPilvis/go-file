// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"strconv"
)

func SendData(store_id int32) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSFuncCall("createAndUploadZip", store_id).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Define a separate templ component for the JavaScript function call
func FileUploadPage(store_id int32) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Head("Upload Files").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<body class=\"bg-gray-100\"><!-- Include JSZip library --><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\"></script><div class=\"container mx-auto p-4\"><h1 class=\"text-3xl font-bold mb-6\">Upload Files</h1><!-- Form for file upload --><form id=\"uploadForm\" hx-post=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs("/auth/stores/" + strconv.Itoa(int(store_id)) + "/upload")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/upload_form.templ`, Line: 27, Col: 82}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" hx-target=\"#status\" hx-swap=\"innerHTML\" class=\"bg-white p-6 rounded-lg shadow-md\" enctype=\"multipart/form-data\"><div class=\"mb-4\"><label for=\"fileInput\" class=\"block text-sm font-medium text-gray-700\">Choose files</label> <input type=\"file\" id=\"fileInput\" name=\"files\" multiple class=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"></div><button type=\"submit\" class=\"m-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">Upload</button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = RedirectButton("Back to Store", "/auth/stores/"+strconv.Itoa(int(store_id))).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = RedirectButton("All Stores", "/auth/stores/").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</form><!-- Status message container --><div id=\"status\" class=\"mt-4 text-sm text-gray-600\"><!-- Status updates will be displayed here --></div></div><!-- Separate JavaScript function --><script>\n            // Attach the event listener to the form's submit event\n            document.addEventListener('DOMContentLoaded', () => {\n                const form = document.getElementById('uploadForm');\n                if (form) {\n                    form.addEventListener('submit', (event) => {\n                        event.preventDefault(); // Prevent the default form submission\n\n                        const storeId = form.getAttribute('hx-post').split('/')[3]; // Extract store_id from hx-post\n                        createAndUploadZip(event, storeId);\n                    });\n                }\n            });\n\n            createAndUploadZip = function(event, storeId) {\n                const fileInput = document.getElementById('fileInput');\n                const files = fileInput.files;\n\n                if (files.length === 0) {\n                    alert('Please select at least one file.');\n                    return;\n                }\n\n                const status = document.getElementById('status');\n                status.textContent = 'Creating archive...';\n\n                const zip = new JSZip();\n\n                // Add files to the ZIP archive\n                for (const file of files) {\n                    zip.file(file.name, file);\n                }\n\n                // Generate the ZIP file\n                zip.generateAsync({ type: 'blob' }).then((zipData) => {\n                    const formData = new FormData();\n                    formData.append('archive', zipData, 'archive.zip'); // Append the ZIP file with a name\n\n                    // Perform the htmx POST request manually\n                    fetch(`/auth/stores/${storeId}/upload`, {\n                        method: 'POST',\n                        body: formData,\n                    })\n                    .then(response => response.json()) // Parse the JSON response\n                    .then(data => {\n                        if (data.error) {\n                            // If there is an error, display the error message\n                            status.textContent = `Error: ${data.error}`;\n                            status.className = 'mt-4 text-sm text-red-600'; // Update style for error\n                        } else if (data.message) {\n                            // If successful, display the success message\n                            status.textContent = data.message;\n                            status.className = 'mt-4 text-sm text-green-600'; // Update style for success\n                        } else {\n                            // Handle unexpected response format\n                            status.textContent = 'Unexpected response from server.';\n                            status.className = 'mt-4 text-sm text-red-600';\n                        }\n                    })\n                    .catch(error => {\n                        status.textContent = 'An error occurred while uploading files.';\n                        status.className = 'mt-4 text-sm text-red-600'; // Update style for error\n                        console.error(error);\n                    });\n                });\n            };\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
