// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_store.sql

package repository

import (
	"context"
)

const addFileToStore = `-- name: AddFileToStore :exec
insert into file_store (fileId, storeId) values (?, ?)
`

type AddFileToStoreParams struct {
	Fileid  int64 `json:"fileid"`
	Storeid int64 `json:"storeid"`
}

func (q *Queries) AddFileToStore(ctx context.Context, arg AddFileToStoreParams) error {
	_, err := q.db.ExecContext(ctx, addFileToStore, arg.Fileid, arg.Storeid)
	return err
}

const getAllFilesFromStore = `-- name: GetAllFilesFromStore :many
select id, fileid, storeid from file_store where id = ?
`

func (q *Queries) GetAllFilesFromStore(ctx context.Context, id int64) ([]FileStore, error) {
	rows, err := q.db.QueryContext(ctx, getAllFilesFromStore, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileStore
	for rows.Next() {
		var i FileStore
		if err := rows.Scan(&i.ID, &i.Fileid, &i.Storeid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveFileToStore = `-- name: MoveFileToStore :exec
update file_store set storeId = ? where fileid = ? and storeId = ?
`

type MoveFileToStoreParams struct {
	Storeid   int64 `json:"storeid"`
	Fileid    int64 `json:"fileid"`
	Storeid_2 int64 `json:"storeid_2"`
}

func (q *Queries) MoveFileToStore(ctx context.Context, arg MoveFileToStoreParams) error {
	_, err := q.db.ExecContext(ctx, moveFileToStore, arg.Storeid, arg.Fileid, arg.Storeid_2)
	return err
}

const removeFileFromStore = `-- name: RemoveFileFromStore :exec
delete from file_store where fileId = ? and storeId = ?
`

type RemoveFileFromStoreParams struct {
	Fileid  int64 `json:"fileid"`
	Storeid int64 `json:"storeid"`
}

func (q *Queries) RemoveFileFromStore(ctx context.Context, arg RemoveFileFromStoreParams) error {
	_, err := q.db.ExecContext(ctx, removeFileFromStore, arg.Fileid, arg.Storeid)
	return err
}
