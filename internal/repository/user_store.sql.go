// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_store.sql

package repository

import (
	"context"
)

const addStoreToUser = `-- name: AddStoreToUser :exec
insert into user_store (userId, storeId) values (?, ?)
`

type AddStoreToUserParams struct {
	Userid  int64 `json:"userid"`
	Storeid int64 `json:"storeid"`
}

func (q *Queries) AddStoreToUser(ctx context.Context, arg AddStoreToUserParams) error {
	_, err := q.db.ExecContext(ctx, addStoreToUser, arg.Userid, arg.Storeid)
	return err
}

const calculatePages = `-- name: CalculatePages :one
SELECT CAST(COUNT(fs.fileId) AS REAL) / ? AS total_pages
FROM file_store fs
JOIN user_store us ON fs.storeId = us.storeId
WHERE us.userId = ? AND fs.storeId = ?
`

type CalculatePagesParams struct {
	Fileid  int64 `json:"fileid"`
	Userid  int64 `json:"userid"`
	Storeid int64 `json:"storeid"`
}

func (q *Queries) CalculatePages(ctx context.Context, arg CalculatePagesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, calculatePages, arg.Fileid, arg.Userid, arg.Storeid)
	var total_pages int64
	err := row.Scan(&total_pages)
	return total_pages, err
}

const getUserStores = `-- name: GetUserStores :many
select id, userid, storeid from user_store where userId = ?
`

func (q *Queries) GetUserStores(ctx context.Context, userid int64) ([]UserStore, error) {
	rows, err := q.db.QueryContext(ctx, getUserStores, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStore
	for rows.Next() {
		var i UserStore
		if err := rows.Scan(&i.ID, &i.Userid, &i.Storeid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStoreFromUser = `-- name: RemoveStoreFromUser :exec
delete from user_store where userId = ? and storeId = ?
`

type RemoveStoreFromUserParams struct {
	Userid  int64 `json:"userid"`
	Storeid int64 `json:"storeid"`
}

func (q *Queries) RemoveStoreFromUser(ctx context.Context, arg RemoveStoreFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeStoreFromUser, arg.Userid, arg.Storeid)
	return err
}
