// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: store.sql

package repository

import (
	"context"
)

const createStore = `-- name: CreateStore :one
insert into stores (id, name, cover) values ($1, $2, $3) returning id, name, cover, created_at
`

type CreateStoreParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Cover int32  `json:"cover"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore, arg.ID, arg.Name, arg.Cover)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
delete from stores where id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStore, id)
	return err
}

const getAllStores = `-- name: GetAllStores :many
select id, name, cover, created_at from stores
`

func (q *Queries) GetAllStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.Query(ctx, getAllStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cover,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoreByID = `-- name: GetStoreByID :one
select id, name, cover, created_at from stores where id = $1
`

func (q *Queries) GetStoreByID(ctx context.Context, id int32) (Store, error) {
	row := q.db.QueryRow(ctx, getStoreByID, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreByName = `-- name: GetStoreByName :one
select id, name, cover, created_at from stores where name = $1
`

func (q *Queries) GetStoreByName(ctx context.Context, name string) (Store, error) {
	row := q.db.QueryRow(ctx, getStoreByName, name)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.CreatedAt,
	)
	return i, err
}

const renameStore = `-- name: RenameStore :one
update stores set name = $2 where id = $1 returning id, name, cover, created_at
`

type RenameStoreParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) RenameStore(ctx context.Context, arg RenameStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, renameStore, arg.ID, arg.Name)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.CreatedAt,
	)
	return i, err
}
