// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (username, password) values ($1, $2) returning id, username, password
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, username, password from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdByUsername = `-- name: GetIdByUsername :one
select id from users where username = $1
`

func (q *Queries) GetIdByUsername(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRow(ctx, getIdByUsername, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, password from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const loginUser = `-- name: LoginUser :one
select id, username, password from users where username = $1
`

func (q *Queries) LoginUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, loginUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const resetPassword = `-- name: ResetPassword :one
update users set password = $2 where username = $1 returning id, username, password
`

type ResetPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, resetPassword, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}
