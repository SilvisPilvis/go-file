// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file.sql

package repository

import (
	"context"
	"time"
)

const createFile = `-- name: CreateFile :one

insert into files (name, original_name, content_type, md5) values (?, ?, ?, ?) returning id, name, original_name, content_type, md5, created_at, deleted_at
`

type CreateFileParams struct {
	Name         string `json:"name"`
	OriginalName string `json:"original_name"`
	ContentType  string `json:"content_type"`
	Md5          string `json:"md5"`
}

// Add CAST(... AS BOOLEAN)
func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.Name,
		arg.OriginalName,
		arg.ContentType,
		arg.Md5,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFileById = `-- name: DeleteFileById :exec
update files set deleted_at = CURRENT_TIMESTAMP where id = ?
`

func (q *Queries) DeleteFileById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFileById, id)
	return err
}

const deleteFileByNanoId = `-- name: DeleteFileByNanoId :exec
delete from files where name = ?
`

func (q *Queries) DeleteFileByNanoId(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteFileByNanoId, name)
	return err
}

const getAllFiles = `-- name: GetAllFiles :many
select id, name, original_name, content_type, md5, created_at, deleted_at from files
`

func (q *Queries) GetAllFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getAllFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OriginalName,
			&i.ContentType,
			&i.Md5,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileByID = `-- name: GetFileByID :one
select id, name, original_name, content_type, md5, created_at, deleted_at from files where id = ?
`

func (q *Queries) GetFileByID(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileByName = `-- name: GetFileByName :one
select id, name, original_name, content_type, md5, created_at, deleted_at from files where name = ?
`

func (q *Queries) GetFileByName(ctx context.Context, name string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByName, name)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileIdByNanoId = `-- name: GetFileIdByNanoId :one
select id, name, original_name, content_type, md5, created_at, deleted_at from files where name = ?
`

func (q *Queries) GetFileIdByNanoId(ctx context.Context, name string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileIdByNanoId, name)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileIdsFromUserStore = `-- name: GetFileIdsFromUserStore :many
SELECT f.id AS file_id
FROM files f
JOIN file_store fs ON f.id = fs.fileId
JOIN user_store us ON fs.storeId = us.storeId
WHERE us.storeId = ? and us.userId = ?
`

type GetFileIdsFromUserStoreParams struct {
	Storeid int64 `json:"storeid"`
	Userid  int64 `json:"userid"`
}

func (q *Queries) GetFileIdsFromUserStore(ctx context.Context, arg GetFileIdsFromUserStoreParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFileIdsFromUserStore, arg.Storeid, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileOriginalNameByNanoId = `-- name: GetFileOriginalNameByNanoId :one
select id, name, original_name, content_type, md5, created_at, deleted_at from files where name = ?
`

func (q *Queries) GetFileOriginalNameByNanoId(ctx context.Context, name string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileOriginalNameByNanoId, name)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFilesPaginated = `-- name: GetFilesPaginated :many
SELECT
    f.id AS file_id,
    f.name AS file_name,
    f.original_name AS file_original_name,
    f.content_type AS file_content_type,
    f.md5 AS file_md5,
    f.created_at AS file_created_at
FROM
    users u
JOIN
    user_store us ON u.id = us.userId
JOIN
    stores s ON us.storeId = s.id
JOIN
    file_store fs ON s.id = fs.storeId
JOIN
    files f ON fs.fileId = f.id
WHERE
    u.id = ?
AND
    s.id = ?
AND
    f.deleted_at IS NULL
ORDER BY
    f.created_at DESC
LIMIT ? OFFSET ?
`

type GetFilesPaginatedParams struct {
	ID     int64 `json:"id"`
	ID_2   int64 `json:"id_2"`
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetFilesPaginatedRow struct {
	FileID           int64      `json:"file_id"`
	FileName         string     `json:"file_name"`
	FileOriginalName string     `json:"file_original_name"`
	FileContentType  string     `json:"file_content_type"`
	FileMd5          string     `json:"file_md5"`
	FileCreatedAt    *time.Time `json:"file_created_at"`
}

func (q *Queries) GetFilesPaginated(ctx context.Context, arg GetFilesPaginatedParams) ([]GetFilesPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilesPaginated,
		arg.ID,
		arg.ID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilesPaginatedRow
	for rows.Next() {
		var i GetFilesPaginatedRow
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.FileOriginalName,
			&i.FileContentType,
			&i.FileMd5,
			&i.FileCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isOwner = `-- name: IsOwner :one
SELECT CAST(EXISTS (
    SELECT 1
    FROM users u
    JOIN user_store us ON u.id = us.userId
    JOIN stores s ON us.storeId = s.id
    JOIN file_store fs ON s.id = fs.storeId
    JOIN files f ON fs.fileId = f.id
    WHERE u.username = ? AND f.name = ?
) AS BOOLEAN)
`

type IsOwnerParams struct {
	Username string `json:"username"`
	Name     string `json:"name"`
}

func (q *Queries) IsOwner(ctx context.Context, arg IsOwnerParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isOwner, arg.Username, arg.Name)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const renameFile = `-- name: RenameFile :one
update files set name = ? where id = ? returning id, name, original_name, content_type, md5, created_at, deleted_at
`

type RenameFileParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) RenameFile(ctx context.Context, arg RenameFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, renameFile, arg.Name, arg.ID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OriginalName,
		&i.ContentType,
		&i.Md5,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
